
DeviceDrivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000378  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000510  08000510  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000510  08000510  00002008  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000510  08000510  00002008  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000510  08000510  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000510  08000510  00001510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000514  08000514  00001514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08000518  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000008  08000520  00002008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000520  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c15  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000331  00000000  00000000  00002c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00002f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000093  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000124f  00000000  00000000  000030eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001149  00000000  00000000  0000433a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000044a5  00000000  00000000  00005483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00009928  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000258  00000000  00000000  0000996c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00009bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000008 	.word	0x20000008
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004f8 	.word	0x080004f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	080004f8 	.word	0x080004f8

080001d8 <GPIO_Init>:
#include "GPIO_Driver.h"


/*This function Initializes the GPIO Port Pin*/
void GPIO_Init(GPIO_RegDef *port, GPIO_PINCONFIG_T *pinConfig)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
	uint8_t pin = pinConfig->pin;
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	73fb      	strb	r3, [r7, #15]

	port->MODER &= ~(GPIO_MODER_BITMASK << (GPIO_MODER_SHIFT_BITS * pin));
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	7bfa      	ldrb	r2, [r7, #15]
 80001ee:	0052      	lsls	r2, r2, #1
 80001f0:	2103      	movs	r1, #3
 80001f2:	fa01 f202 	lsl.w	r2, r1, r2
 80001f6:	43d2      	mvns	r2, r2
 80001f8:	401a      	ands	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	601a      	str	r2, [r3, #0]
	port->MODER |= ((pinConfig->mode & GPIO_MODER_BITMASK) << (GPIO_MODER_SHIFT_BITS * pin));
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	683a      	ldr	r2, [r7, #0]
 8000204:	7852      	ldrb	r2, [r2, #1]
 8000206:	f002 0103 	and.w	r1, r2, #3
 800020a:	7bfa      	ldrb	r2, [r7, #15]
 800020c:	0052      	lsls	r2, r2, #1
 800020e:	fa01 f202 	lsl.w	r2, r1, r2
 8000212:	431a      	orrs	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	601a      	str	r2, [r3, #0]

	port->OTYPER &= ~(1 << pin);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	7bfa      	ldrb	r2, [r7, #15]
 800021e:	2101      	movs	r1, #1
 8000220:	fa01 f202 	lsl.w	r2, r1, r2
 8000224:	43d2      	mvns	r2, r2
 8000226:	401a      	ands	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	605a      	str	r2, [r3, #4]
	port->OTYPER  |= (pinConfig->otype << pin);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	7892      	ldrb	r2, [r2, #2]
 8000234:	4611      	mov	r1, r2
 8000236:	7bfa      	ldrb	r2, [r7, #15]
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	431a      	orrs	r2, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	605a      	str	r2, [r3, #4]

	port->OSPEEDR &= ~(GPIO_OSPEEDR_BITMASK << (GPIO_OSPEEDR_SHIFT_BITS * pin));
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	689b      	ldr	r3, [r3, #8]
 8000246:	7bfa      	ldrb	r2, [r7, #15]
 8000248:	0052      	lsls	r2, r2, #1
 800024a:	2103      	movs	r1, #3
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	43d2      	mvns	r2, r2
 8000252:	401a      	ands	r2, r3
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	609a      	str	r2, [r3, #8]
	port->OSPEEDR |= ((pinConfig->speed & GPIO_OSPEEDR_BITMASK) << (GPIO_OSPEEDR_SHIFT_BITS * pin));
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	683a      	ldr	r2, [r7, #0]
 800025e:	78d2      	ldrb	r2, [r2, #3]
 8000260:	f002 0103 	and.w	r1, r2, #3
 8000264:	7bfa      	ldrb	r2, [r7, #15]
 8000266:	0052      	lsls	r2, r2, #1
 8000268:	fa01 f202 	lsl.w	r2, r1, r2
 800026c:	431a      	orrs	r2, r3
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	609a      	str	r2, [r3, #8]

	port->PUPDR &= ~(GPIO_PUPDR_BITMASK << (GPIO_PUPDR_SHIFT_BITS * pin));
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	7bfa      	ldrb	r2, [r7, #15]
 8000278:	0052      	lsls	r2, r2, #1
 800027a:	2103      	movs	r1, #3
 800027c:	fa01 f202 	lsl.w	r2, r1, r2
 8000280:	43d2      	mvns	r2, r2
 8000282:	401a      	ands	r2, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	60da      	str	r2, [r3, #12]
	port->PUPDR |= ((pinConfig->pupdr & GPIO_PUPDR_BITMASK) << (GPIO_PUPDR_SHIFT_BITS *pin));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	7912      	ldrb	r2, [r2, #4]
 8000290:	f002 0103 	and.w	r1, r2, #3
 8000294:	7bfa      	ldrb	r2, [r7, #15]
 8000296:	0052      	lsls	r2, r2, #1
 8000298:	fa01 f202 	lsl.w	r2, r1, r2
 800029c:	431a      	orrs	r2, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	60da      	str	r2, [r3, #12]

	if(pinConfig->mode == GPIO_MODE_ALT)
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	785b      	ldrb	r3, [r3, #1]
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d137      	bne.n	800031a <GPIO_Init+0x142>
	{
		if(pin < GPIO_AFR_SIZE)
 80002aa:	7bfb      	ldrb	r3, [r7, #15]
 80002ac:	2b07      	cmp	r3, #7
 80002ae:	d817      	bhi.n	80002e0 <GPIO_Init+0x108>
		{
			port->AFRL &= (GPIO_AFR_MASK << (GPIO_AFR_SHIFT_BITS*pin));
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	6a1b      	ldr	r3, [r3, #32]
 80002b4:	7bfa      	ldrb	r2, [r7, #15]
 80002b6:	0092      	lsls	r2, r2, #2
 80002b8:	210f      	movs	r1, #15
 80002ba:	fa01 f202 	lsl.w	r2, r1, r2
 80002be:	401a      	ands	r2, r3
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	621a      	str	r2, [r3, #32]
			port->AFRL |= ((pinConfig->alternatefunc & GPIO_AFR_MASK) << (GPIO_AFR_SHIFT_BITS * pin));
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	7952      	ldrb	r2, [r2, #5]
 80002cc:	f002 010f 	and.w	r1, r2, #15
 80002d0:	7bfa      	ldrb	r2, [r7, #15]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	fa01 f202 	lsl.w	r2, r1, r2
 80002d8:	431a      	orrs	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	621a      	str	r2, [r3, #32]
		{
			port->AFRH &= (GPIO_AFR_MASK << (GPIO_AFR_SHIFT_BITS*pin));
			port->AFRH |= ((pinConfig->alternatefunc & GPIO_AFR_MASK) << (GPIO_AFR_SHIFT_BITS * pin));
		}
	}
}
 80002de:	e01c      	b.n	800031a <GPIO_Init+0x142>
		else if(pin >= GPIO_AFR_SIZE || pin <=GPIO_AFR_MAXSIZE)
 80002e0:	7bfb      	ldrb	r3, [r7, #15]
 80002e2:	2b07      	cmp	r3, #7
 80002e4:	d802      	bhi.n	80002ec <GPIO_Init+0x114>
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	2b0f      	cmp	r3, #15
 80002ea:	d816      	bhi.n	800031a <GPIO_Init+0x142>
			port->AFRH &= (GPIO_AFR_MASK << (GPIO_AFR_SHIFT_BITS*pin));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002f0:	7bfa      	ldrb	r2, [r7, #15]
 80002f2:	0092      	lsls	r2, r2, #2
 80002f4:	210f      	movs	r1, #15
 80002f6:	fa01 f202 	lsl.w	r2, r1, r2
 80002fa:	401a      	ands	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	625a      	str	r2, [r3, #36]	@ 0x24
			port->AFRH |= ((pinConfig->alternatefunc & GPIO_AFR_MASK) << (GPIO_AFR_SHIFT_BITS * pin));
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000304:	683a      	ldr	r2, [r7, #0]
 8000306:	7952      	ldrb	r2, [r2, #5]
 8000308:	f002 010f 	and.w	r1, r2, #15
 800030c:	7bfa      	ldrb	r2, [r7, #15]
 800030e:	0092      	lsls	r2, r2, #2
 8000310:	fa01 f202 	lsl.w	r2, r1, r2
 8000314:	431a      	orrs	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800031a:	bf00      	nop
 800031c:	3714      	adds	r7, #20
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <GPIO_TogglePin>:
		RCC->AHB1RSTR &= ~( 1 << 7);
	}
}
/*This function toggles a particular GPIO Pin*/
void GPIO_TogglePin(GPIO_RegDef *port, uint8_t pin)
{
 8000326:	b480      	push	{r7}
 8000328:	b083      	sub	sp, #12
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
 800032e:	460b      	mov	r3, r1
 8000330:	70fb      	strb	r3, [r7, #3]
     port->ODR ^= (1 << pin);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	78fa      	ldrb	r2, [r7, #3]
 8000338:	2101      	movs	r1, #1
 800033a:	fa01 f202 	lsl.w	r2, r1, r2
 800033e:	405a      	eors	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	615a      	str	r2, [r3, #20]
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <RCC_EnableGPIO>:
#include "RCC_Driver.h"

/*Enables the GPIO Peripheral Clock for a particular GPIO port */
void RCC_EnableGPIO(GPIO_RegDef *port)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	if(port == GPIOA)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a23      	ldr	r2, [pc, #140]	@ (80003e8 <RCC_EnableGPIO+0x98>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <RCC_EnableGPIO+0x1e>
	{
		RCC->AHB1ENR |= ( 1 << 0);
 8000360:	4b22      	ldr	r3, [pc, #136]	@ (80003ec <RCC_EnableGPIO+0x9c>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000364:	4a21      	ldr	r2, [pc, #132]	@ (80003ec <RCC_EnableGPIO+0x9c>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	else if (port == GPIOH)
	{
		RCC->AHB1ENR |= ( 1 << 7);
	}
}
 800036c:	e035      	b.n	80003da <RCC_EnableGPIO+0x8a>
	else if (port == GPIOB)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a1f      	ldr	r2, [pc, #124]	@ (80003f0 <RCC_EnableGPIO+0xa0>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <RCC_EnableGPIO+0x34>
		RCC->AHB1ENR |= ( 1 << 1);
 8000376:	4b1d      	ldr	r3, [pc, #116]	@ (80003ec <RCC_EnableGPIO+0x9c>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <RCC_EnableGPIO+0x9c>)
 800037c:	f043 0302 	orr.w	r3, r3, #2
 8000380:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000382:	e02a      	b.n	80003da <RCC_EnableGPIO+0x8a>
	else if (port == GPIOC)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a1b      	ldr	r2, [pc, #108]	@ (80003f4 <RCC_EnableGPIO+0xa4>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <RCC_EnableGPIO+0x4a>
		RCC->AHB1ENR |= ( 1 << 2);
 800038c:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <RCC_EnableGPIO+0x9c>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000390:	4a16      	ldr	r2, [pc, #88]	@ (80003ec <RCC_EnableGPIO+0x9c>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000398:	e01f      	b.n	80003da <RCC_EnableGPIO+0x8a>
	else if (port == GPIOD)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a16      	ldr	r2, [pc, #88]	@ (80003f8 <RCC_EnableGPIO+0xa8>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <RCC_EnableGPIO+0x60>
		RCC->AHB1ENR |= ( 1 << 3);
 80003a2:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <RCC_EnableGPIO+0x9c>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a6:	4a11      	ldr	r2, [pc, #68]	@ (80003ec <RCC_EnableGPIO+0x9c>)
 80003a8:	f043 0308 	orr.w	r3, r3, #8
 80003ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ae:	e014      	b.n	80003da <RCC_EnableGPIO+0x8a>
	else if (port == GPIOE)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a12      	ldr	r2, [pc, #72]	@ (80003fc <RCC_EnableGPIO+0xac>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <RCC_EnableGPIO+0x76>
		RCC->AHB1ENR |= ( 1 << 4);
 80003b8:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <RCC_EnableGPIO+0x9c>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003bc:	4a0b      	ldr	r2, [pc, #44]	@ (80003ec <RCC_EnableGPIO+0x9c>)
 80003be:	f043 0310 	orr.w	r3, r3, #16
 80003c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c4:	e009      	b.n	80003da <RCC_EnableGPIO+0x8a>
	else if (port == GPIOH)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000400 <RCC_EnableGPIO+0xb0>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d105      	bne.n	80003da <RCC_EnableGPIO+0x8a>
		RCC->AHB1ENR |= ( 1 << 7);
 80003ce:	4b07      	ldr	r3, [pc, #28]	@ (80003ec <RCC_EnableGPIO+0x9c>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d2:	4a06      	ldr	r2, [pc, #24]	@ (80003ec <RCC_EnableGPIO+0x9c>)
 80003d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40020000 	.word	0x40020000
 80003ec:	40023800 	.word	0x40023800
 80003f0:	40020400 	.word	0x40020400
 80003f4:	40020800 	.word	0x40020800
 80003f8:	40020c00 	.word	0x40020c00
 80003fc:	40021000 	.word	0x40021000
 8000400:	40021c00 	.word	0x40021c00

08000404 <delay>:
		.pupdr=GPIO_NO_PULL,
		.alternatefunc=0
};

void delay(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i< 1777777; i++);
 800040a:	2300      	movs	r3, #0
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	e002      	b.n	8000416 <delay+0x12>
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3301      	adds	r3, #1
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a04      	ldr	r2, [pc, #16]	@ (800042c <delay+0x28>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d9f8      	bls.n	8000410 <delay+0xc>
}
 800041e:	bf00      	nop
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	001b2070 	.word	0x001b2070

08000430 <main>:

int main(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	RCC_EnableGPIO(GPIOD);
 8000434:	4807      	ldr	r0, [pc, #28]	@ (8000454 <main+0x24>)
 8000436:	f7ff ff8b 	bl	8000350 <RCC_EnableGPIO>
	GPIO_Init(GPIOD, &RedLed);
 800043a:	4907      	ldr	r1, [pc, #28]	@ (8000458 <main+0x28>)
 800043c:	4805      	ldr	r0, [pc, #20]	@ (8000454 <main+0x24>)
 800043e:	f7ff fecb 	bl	80001d8 <GPIO_Init>
	while(1)
	{
		GPIO_TogglePin(GPIOD, 14);
 8000442:	210e      	movs	r1, #14
 8000444:	4803      	ldr	r0, [pc, #12]	@ (8000454 <main+0x24>)
 8000446:	f7ff ff6e 	bl	8000326 <GPIO_TogglePin>
		delay();
 800044a:	f7ff ffdb 	bl	8000404 <delay>
		GPIO_TogglePin(GPIOD, 14);
 800044e:	bf00      	nop
 8000450:	e7f7      	b.n	8000442 <main+0x12>
 8000452:	bf00      	nop
 8000454:	40020c00 	.word	0x40020c00
 8000458:	20000000 	.word	0x20000000

0800045c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800045c:	480d      	ldr	r0, [pc, #52]	@ (8000494 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800045e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000460:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000464:	480c      	ldr	r0, [pc, #48]	@ (8000498 <LoopForever+0x6>)
  ldr r1, =_edata
 8000466:	490d      	ldr	r1, [pc, #52]	@ (800049c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000468:	4a0d      	ldr	r2, [pc, #52]	@ (80004a0 <LoopForever+0xe>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800046c:	e002      	b.n	8000474 <LoopCopyDataInit>

0800046e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000472:	3304      	adds	r3, #4

08000474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000478:	d3f9      	bcc.n	800046e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047a:	4a0a      	ldr	r2, [pc, #40]	@ (80004a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800047c:	4c0a      	ldr	r4, [pc, #40]	@ (80004a8 <LoopForever+0x16>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000480:	e001      	b.n	8000486 <LoopFillZerobss>

08000482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000484:	3204      	adds	r2, #4

08000486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000488:	d3fb      	bcc.n	8000482 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800048a:	f000 f811 	bl	80004b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048e:	f7ff ffcf 	bl	8000430 <main>

08000492 <LoopForever>:

LoopForever:
  b LoopForever
 8000492:	e7fe      	b.n	8000492 <LoopForever>
  ldr   r0, =_estack
 8000494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800049c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80004a0:	08000518 	.word	0x08000518
  ldr r2, =_sbss
 80004a4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80004a8:	20000024 	.word	0x20000024

080004ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ac:	e7fe      	b.n	80004ac <ADC_IRQHandler>
	...

080004b0 <__libc_init_array>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	4d0d      	ldr	r5, [pc, #52]	@ (80004e8 <__libc_init_array+0x38>)
 80004b4:	4c0d      	ldr	r4, [pc, #52]	@ (80004ec <__libc_init_array+0x3c>)
 80004b6:	1b64      	subs	r4, r4, r5
 80004b8:	10a4      	asrs	r4, r4, #2
 80004ba:	2600      	movs	r6, #0
 80004bc:	42a6      	cmp	r6, r4
 80004be:	d109      	bne.n	80004d4 <__libc_init_array+0x24>
 80004c0:	4d0b      	ldr	r5, [pc, #44]	@ (80004f0 <__libc_init_array+0x40>)
 80004c2:	4c0c      	ldr	r4, [pc, #48]	@ (80004f4 <__libc_init_array+0x44>)
 80004c4:	f000 f818 	bl	80004f8 <_init>
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	10a4      	asrs	r4, r4, #2
 80004cc:	2600      	movs	r6, #0
 80004ce:	42a6      	cmp	r6, r4
 80004d0:	d105      	bne.n	80004de <__libc_init_array+0x2e>
 80004d2:	bd70      	pop	{r4, r5, r6, pc}
 80004d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d8:	4798      	blx	r3
 80004da:	3601      	adds	r6, #1
 80004dc:	e7ee      	b.n	80004bc <__libc_init_array+0xc>
 80004de:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e2:	4798      	blx	r3
 80004e4:	3601      	adds	r6, #1
 80004e6:	e7f2      	b.n	80004ce <__libc_init_array+0x1e>
 80004e8:	08000510 	.word	0x08000510
 80004ec:	08000510 	.word	0x08000510
 80004f0:	08000510 	.word	0x08000510
 80004f4:	08000514 	.word	0x08000514

080004f8 <_init>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	bf00      	nop
 80004fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fe:	bc08      	pop	{r3}
 8000500:	469e      	mov	lr, r3
 8000502:	4770      	bx	lr

08000504 <_fini>:
 8000504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000506:	bf00      	nop
 8000508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050a:	bc08      	pop	{r3}
 800050c:	469e      	mov	lr, r3
 800050e:	4770      	bx	lr
